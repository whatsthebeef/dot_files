" Treat file as vim config
" vim: set ft=vim:

" set defsearch=startpage  
ignorekeys add https://docs.google.com
ignorekeys add https://www.duolingo.com

set scroll=20

" Reload config
" map <C-r> :source /Users/john/.pentadactylrc<CR>
map <C-r> :source /Users/john/.vimperatorrc<CR>

" nmap <Leader>ds :set defsearch=startpage  

" More vim like movement
nmap l <CR>
nmap L :forward<CR>
nmap i gi<C-t>i
" nmap i <Insert>
" tmap <CR> i<Cr>

nmap J 10<Down>
nmap K 10<Up>
nmap j 100<Down>
nmap k 100<Up>

" Tabs
nmap g1 b1<CR>
nmap g2 b2<CR>
nmap g3 b3<CR>
nmap g4 b4<CR>
nmap g5 b5<CR>
nmap g6 b6<CR>
nmap g7 b7<CR>
nmap g8 b8<CR>
nmap g9 b9<CR>

" Map quick marks to normal marks
nmap \' go
nmap m M
map , <Leader>

" q for quit
" nmap q :tabclose<CR>
nmap cc <M-A-k>
nmap ce <M-A-i>

" Language search engine
nmap <Leader>se :t http://www.wordreference.com/esen/
nmap <Leader>es :t http://www.wordreference.com/enes/
nmap <Leader>te :t https://translate.google.com/#tr/en/
nmap <Leader>et :t https://translate.google.com/#en/tr/
nmap <Leader>sc :t http://www.wordreference.com/conj/ESverbs.aspx?v=
nmap <Leader>tc :t http://www.verbix.com/webverbix/go.php?Submit=Go&D1=31&H1=131&T1=
nmap <Leader>tc :t http://www.verbix.com/webverbix/go.php?Submit=Go&D1=31&H1=131&T1=

" Programming search engine
nmap <Leader>so :o http://stackoverflow.com/search?q=

" Qmarks
qmark m https://mail.google.com
qmark b http://bbc.co.uk/news
qmark g http://www.theguardian.com/uk
qmark k https://dashboard.heroku.com
qmark i https://firstlook.org/theintercept
qmark h https://news.ycombinator.com/
qmark n http://www.thenation.com/blogs/ali-gharib
qmark x http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux&sec=1
qmark t https://trello.com
qmark y http://www.youtube.com
qmark a https://docs.angularjs.org/api
qmark r https://www.reddit.com/r/programming

""" CSS
" style startpage.com,3g2upl4pq6kufc4m.onion,duckduckgo. :focus {background:yellow;} 
style * :focus {background:yellow !important; color:black !important;} 

style * #statusbar-display {display: none !important;}

""" Javascript
js <<EOM

var ddg = "3g2upl4pq6kufc4m.onion/lite";
// var spResults = "startpage.com/do/search";
var spResults = "startpage.com";
var duckduckgo = "duckduckgo.com";
var spSearch = "startpage.com/$";
var bbc = "bbc";

var init = function(filter, initFunction, args) {
  if(matchesHref(filter)) {
    initFunction(args);
  }
}

var mapper = function(key, mapTo, exceptions) {
   mappings.addUserMap(
      [modes.NORMAL],
      [key], "",
      function(){
         if(exceptions) {
            for(var i = 0; i < exceptions.length; i++) {
               if(matchesHref(exceptions[i]["filter"])) {
                  var m = exceptions[i]["mapTo"];
                  if(isFunction(m)) {
                     m();
                  }
                  else {
                     feedKeys(m);
                  }
                  return;
               }
            }
         }
         if(isFunction(mapTo)) {
            mapTo();
         }
         else {
            feedKeys(mapTo);
         }
      }, {}
   );
};

var functionMapper = function(key, mapToFunction) {
   mappings.addUserMap(
      [modes.NORMAL],
      [key], "",
      mapToFunction, {}
   );
};

var linkMapper = function(key, link, newTab) {
   mappings.addUserMap(
      [modes.NORMAL],
      [key], "",
      function(arg) {
         if(newTab) {
            liberator.execute("tabopen "+link);
         }
         else {
            liberator.execute("open "+link);
         }
      }, {}
   );
};

var isFunction = function(obj) {
  return !!(obj && obj.constructor && obj.call && obj.apply);
};

var matchesHref = function(expression) {
   if(isFunction(expression)) {
      return expression();
   }
   else {
      var re = new RegExp(expression);
      return re.test(bWindow.location.href);
   }
}

var feedKeys = function(keys) {
   events.feedkeys(keys);
}

var openInNewTab  = function() {
   var href = bWindow.document.activeElement.getAttribute("href");
   liberator.execute("background tabopen "+href);
}

var backInNewTab = function() {
   var href = bWindow.location.href;
   liberator.execute("background tabopen "+href);
   liberator.execute("back");
}

var resultList = function(s) {
  var self = this;
  var _url = bWindow.location.href;
  var selector = s;
  var results = getResults(s);
  var position = 0;

  function getResults(selector) {
    return bWindow.document.querySelectorAll(selector);
  }

  return {
    next : function() {
      this.reloadFocus();
      // Jumps ahead and then back to make content visible
      this.focus((position < results.length-1) ? position+2 : 0);
      this.focus(position-1);
    },
    previous : function() {
      this.reloadFocus();
      this.focus((position > 0) ? position-1 : results.length-1);
    },
    last : function() {
      this.reloadFocus();
      this.focus(results.length-1);
      this.focus(position-1);
    },
    first : function() {
      this.reloadFocus();
      this.focus(0);
    },
    forward : function() {
      this.reloadFocus();
      position += 7;
      this.focus((position < results.length-1) ? position : results.length-1);
      this.focus(position-1);
    },
    back : function() {
      this.reloadFocus();
      position -= 6;
      position = (position >= 0) ? position : 0;
      this.focus(position);
    },
    focus : function(i) {
      position = i;
      if(results[i]) {
        results[i].focus();
      }
    },
    reloadFocus : function() {
      this.refresh();
      this.focus(position);
    },
    atUrl : function() {
      return (bWindow.location.href == this.url()); 
    },
    refresh : function() {
      if(this.atUrl()) {
        results = getResults(selector);
      }
    },
    dead : function() {
      try {
        // try any call to results length
        results.length;
        return false;
      } 
      catch(e) {
        return true;
      }
    },
    url : function() {
      return _url;
    }
  };
}

var currentResultList = null;

var initResultList = function(selector) {
  if(resultListExists()) {
    currentResultList.reloadFocus();  
  }
  else {
    currentResultList = resultList(selector);
    currentResultList.focus(0);
  }
}

var nextResult = function() {
  currentResultList.next();
  // bWindow.document.activeElement.parentNode.parentNode.className += " here";
}

var previousResult = function() {
  currentResultList.previous();
}

var firstResult  = function() {
  currentResultList.first();
}

var forwardResult  = function() {
  currentResultList.forward();
}

var backResult  = function() {
  currentResultList.back();
}

var lastResult  = function() {
  currentResultList.last();
}

var focusResult = function(i) {
  currentResultList.focus(i);
}

var resultListExists = function() {
  return (currentResultList && currentResultList.atUrl());
}

var yankFocus = function() {
   var href = bWindow.document.activeElement.getAttribute("href");
}

var removeIfNotFirstTab = function() {
   // var tabIndex = getBrowser().selectedTab._tPos;
   var numTabs = getBrowser().tabs.length;
   if(numTabs > 1) {
      getBrowser().removeTab(getBrowser().selectedTab);
   }
}

mapper("h", function() {
  liberator.execute("back");
});

mapper("j", "<C-d>", [{filter:resultListExists, mapTo:nextResult}]);
mapper("k", "<C-u>",   [{filter:resultListExists, mapTo:previousResult}]);
mapper("gg", "<Home>",   [{filter:resultListExists, mapTo:firstResult}]);
mapper("G", "<End>",   [{filter:resultListExists, mapTo:lastResult}]);
mapper("<C-f>", "<C-f>",   [{filter:resultListExists, mapTo:forwardResult}]);
mapper("<C-b>", "<C-b>",   [{filter:resultListExists, mapTo:backResult}]);

mapper("<C-l>", openInNewTab );
mapper("<C-h>", backInNewTab );
mapper("q", removeIfNotFirstTab );

linkMapper("d", duckduckgo);
linkMapper("D", duckduckgo, true);

initAll = function() {
  // init(ddg+"/", initResultList, "a.result-link");
  init(duckduckgo+"\\/\\?q=", initResultList, "a.result__a");
  init("ycombinator", initResultList, "td.title > a");
  init("reddit", initResultList, "div.entry > p.title > a");
  init("mail.google.com", initResultList, "tr.zA.yO");
  // init(spResults, initResultList, ".result h3 a");
  // init("bbc", initResultList, "h2 > a, h3 > a");
  // init("theguardian.com/uk", initResultList, "h1 > a, h3 > a");
  // init("theintercept/$", initResultList, "h1 > a");
  // init("mutt.org", initResultList, "li > a:last-child");
  // init(spSearch, feedKeys, "i");
  // init(ddg+"$", feedKeys, "i");
}

var shouldInit = true;
initPages = function() {
  bWindow = window.content.window;
  bWindow.onpageshow = function(){
    initAll();
  }
};

EOM

""" Init
" autocmd PageLoad .* :js initPages()
autocmd LocationChange .* :js initPages()


