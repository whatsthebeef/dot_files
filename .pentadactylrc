" Treat file as vim config
" vim: set ft=vim:

" Reload config
map <C-r> :source /Users/john/.pentadactylrc<CR>
" map <C-r> :source /Users/john/.vimperatorrc<CR>

" More vim like movement
nmap l <CR>
nmap L :forward<CR>
nmap i gi<C-t>
tmap <CR> i<Cr>

" Map quick marks to normal marks
nmap \' go
nmap m M

" q for quit
nmap q :tabclose<CR>

qmark a http://bitbucket.org
qmark b http://bbc.co.uk/news
qmark g http://guardian.co.uk
qmark i https://firstlook.org/theintercept
qmark h https://github.com/whatsthebeef
qmark n http://www.thenation.com/blogs/ali-gharib
qmark t http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux&sec=1
qmark y http://www.youtube.com
qmark m http://www.mutt.org/doc/manual/

""" CSS
" style startpage.com,3g2upl4pq6kufc4m.onion,duckduckgo. :focus {background:yellow;} 
style * :focus {background:yellow;} 

""" Javascript
js <<EOM

var ddg = "3g2upl4pq6kufc4m.onion/lite";
var spResults = "startpage.com/do/search";
var spSearch = "startpage.com/$";
var bbc = "bbc";

var init = function(filter, initFunction, args) {
   if(matchesHref(filter)) {
      initFunction(args);
   }
}

var mapper = function(key, mapTo, exceptions) {
   group.mappings.add(
      [modes.NORMAL],
      [key], "",
      function(){
         if(exceptions) {
            for(var i = 0; i < exceptions.length; i++) {
               if(matchesHref(exceptions[i]["filter"])) {
                  var m = exceptions[i]["mapTo"];
                  if(isFunction(m)) {
                     m();
                  }
                  else {
                     feedKeys(m);
                  }
                  return;
               }
            }
         }
         if(isFunction(mapTo)) {
            mapTo();
         }
         else {
            feedKeys(mapTo);
         }
      }, {}
   );
};

var functionMapper = function(key, mapToFunction) {
   group.mappings.add(
      [modes.NORMAL],
      [key], "",
      mapToFunction, {}
   );
};

var linkMapper = function(key, link, newTab) {
   group.mappings.add(
      [modes.NORMAL],
      [key], "",
      function(arg) {
         if(newTab) {
            liberator.execute("tabopen "+link);
         }
         else {
            liberator.execute("open "+link);
         }
      }, {}
   );
};

var isFunction = function(obj) {
  return !!(obj && obj.constructor && obj.call && obj.apply);
};

var matchesHref = function(string) {
   var re = new RegExp(string);
   return re.test(bWindow.location.href);
}

var feedKeys = function(keys) {
   events.feedkeys(keys);
}

var backFromResult = function(keys) {
   events.feedkeys("h");
}

var openInNewTab  = function() {
   var href = bWindow.document.activeElement.getAttribute("href");
   liberator.execute("background tabopen "+href);
}

var backInNewTab = function() {
   var href = bWindow.location.href;
   liberator.execute("background tabopen "+href);
   liberator.execute("back");
}

var resultList = function(selector) {
   var results = bWindow.document.querySelectorAll(selector);
   var position = 0;
   return {
      next : function() {
         position = (position < results.length-1) ? position+1 : 0;
         results[position].focus();
      },
      previous : function() {
         position = (position > 0) ? position-1 : results.length-1;
         results[position].focus();
      },
      focus : function(i) {
         results[i].focus();
      }
   };
}

var currentResultList = null;
var initResultList = function(selector) {
   currentResultList = resultList(selector);
}

var nextResult = function() {
   currentResultList.next();
}

var previousResult = function() {
   currentResultList.previous();
}

var focusResult = function(i) {
   currentResultList.focus(i);
}

var yankFocus = function() {
   var href = bWindow.document.activeElement.getAttribute("href");
}

mapper("j", "10<Down>", [{filter:"("+ddg+"|"+spResults+"|"+bbc+")", mapTo:nextResult}]);
mapper("k", "10<Up>",   [{filter:"("+ddg+"|"+spResults+"|"+bbc+")", mapTo:previousResult}]);

mapper("h", function(){ 
   shouldInit = false;
   liberator.execute("back");
});

mapper("<C-l>", openInNewTab );
mapper("<C-h>", backInNewTab );

linkMapper("t", spSearch);
linkMapper("T", spSearch, true);
linkMapper("d", ddg);
linkMapper("D", ddg, true);

var shouldInit = true;
initPages = function() {
   bWindow = window.content.window;
   bWindow.onload = function(){
      init(ddg+"/", initResultList, "a.result-link");
      init(spResults, initResultList, ".result h3 a");
      if(shouldInit) {
         init(ddg+"/", focusResult, 0);
         init(spResults, focusResult, 0);
      }
      else {
         shouldInit = true; 
      }
      init(spSearch, feedKeys, "i");
      init(ddg+"$", feedKeys, "i");
   }
};

EOM

""" Init
" autocmd PageLoad * :js initPages()
autocmd LocationChange * :js initPages()


